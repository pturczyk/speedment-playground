package io.pturczyk.speed.generated.postgres.public_.books.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import io.pturczyk.speed.generated.postgres.public_.authors.Authors;
import io.pturczyk.speed.generated.postgres.public_.books.Books;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * io.pturczyk.speed.generated.postgres.public_.books.Books}-interface
 * representing entities of the {@code books}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBooks {
    
    /**
     * This Field corresponds to the {@link Books} field that can be obtained
     * using the {@link Books#getBId()} method.
     */
    IntField<Books, Integer> B_ID = IntField.create(
        Identifier.B_ID,
        Books::getBId,
        Books::setBId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Books} field that can be obtained
     * using the {@link Books#getBTitle()} method.
     */
    StringField<Books, String> B_TITLE = StringField.create(
        Identifier.B_TITLE,
        Books::getBTitle,
        Books::setBTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Books} field that can be obtained
     * using the {@link Books#getBAuthorId()} method.
     */
    ComparableForeignKeyField<Books, Integer, Integer, Authors> B_AUTHOR_ID = ComparableForeignKeyField.create(
        Identifier.B_AUTHOR_ID,
        o -> OptionalUtil.unwrap(o.getBAuthorId()),
        Books::setBAuthorId,
        Authors.A_ID,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the bId of this Books. The bId field corresponds to the database
     * column postgres.public.books.b_id.
     * 
     * @return the bId of this Books
     */
    int getBId();
    
    /**
     * Returns the bTitle of this Books. The bTitle field corresponds to the
     * database column postgres.public.books.b_title.
     * 
     * @return the bTitle of this Books
     */
    String getBTitle();
    
    /**
     * Returns the bAuthorId of this Books. The bAuthorId field corresponds to
     * the database column postgres.public.books.b_author_id.
     * 
     * @return the bAuthorId of this Books
     */
    OptionalInt getBAuthorId();
    
    /**
     * Sets the bId of this Books. The bId field corresponds to the database
     * column postgres.public.books.b_id.
     * 
     * @param bId to set of this Books
     * @return    this Books instance
     */
    Books setBId(int bId);
    
    /**
     * Sets the bTitle of this Books. The bTitle field corresponds to the
     * database column postgres.public.books.b_title.
     * 
     * @param bTitle to set of this Books
     * @return       this Books instance
     */
    Books setBTitle(String bTitle);
    
    /**
     * Sets the bAuthorId of this Books. The bAuthorId field corresponds to the
     * database column postgres.public.books.b_author_id.
     * 
     * @param bAuthorId to set of this Books
     * @return          this Books instance
     */
    Books setBAuthorId(Integer bAuthorId);
    
    /**
     * Queries the specified manager for the referenced Authors. If no such
     * Authors exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Authors> findBAuthorId(Manager<Authors> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Books> {
        
        B_ID        ("b_id"),
        B_TITLE     ("b_title"),
        B_AUTHOR_ID ("b_author_id");
        
        private final String columnId;
        private final TableIdentifier<Books> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "postgres";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "books";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Books> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}