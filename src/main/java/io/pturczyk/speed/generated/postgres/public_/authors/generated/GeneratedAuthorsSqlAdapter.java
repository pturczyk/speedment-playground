package io.pturczyk.speed.generated.postgres.public_.authors.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;
import io.pturczyk.speed.generated.postgres.public_.authors.Authors;
import io.pturczyk.speed.generated.postgres.public_.authors.AuthorsImpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * io.pturczyk.speed.generated.postgres.public_.authors.Authors} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAuthorsSqlAdapter implements SqlAdapter<Authors> {
    
    private final TableIdentifier<Authors> tableIdentifier;
    
    protected GeneratedAuthorsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("postgres", "public", "authors");
    }
    
    protected Authors apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setAId(        resultSet.getInt(1 + offset))
            .setAFirstName( resultSet.getString(2 + offset))
            .setALastName(  resultSet.getString(3 + offset))
            ;
    }
    
    protected AuthorsImpl createEntity() {
        return new AuthorsImpl();
    }
    
    @Override
    public TableIdentifier<Authors> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Authors> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Authors> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}