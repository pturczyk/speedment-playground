package io.pturczyk.speed.generated.postgres.public_.authors.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import io.pturczyk.speed.generated.postgres.public_.authors.Authors;
import java.util.Optional;

/**
 * The generated base for the {@link
 * io.pturczyk.speed.generated.postgres.public_.authors.Authors}-interface
 * representing entities of the {@code authors}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAuthors {
    
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getAId()} method.
     */
    IntField<Authors, Integer> A_ID = IntField.create(
        Identifier.A_ID,
        Authors::getAId,
        Authors::setAId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getAFirstName()} method.
     */
    StringField<Authors, String> A_FIRST_NAME = StringField.create(
        Identifier.A_FIRST_NAME,
        o -> OptionalUtil.unwrap(o.getAFirstName()),
        Authors::setAFirstName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Authors} field that can be obtained
     * using the {@link Authors#getALastName()} method.
     */
    StringField<Authors, String> A_LAST_NAME = StringField.create(
        Identifier.A_LAST_NAME,
        o -> OptionalUtil.unwrap(o.getALastName()),
        Authors::setALastName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the aId of this Authors. The aId field corresponds to the
     * database column postgres.public.authors.a_id.
     * 
     * @return the aId of this Authors
     */
    int getAId();
    
    /**
     * Returns the aFirstName of this Authors. The aFirstName field corresponds
     * to the database column postgres.public.authors.a_first_name.
     * 
     * @return the aFirstName of this Authors
     */
    Optional<String> getAFirstName();
    
    /**
     * Returns the aLastName of this Authors. The aLastName field corresponds to
     * the database column postgres.public.authors.a_last_name.
     * 
     * @return the aLastName of this Authors
     */
    Optional<String> getALastName();
    
    /**
     * Sets the aId of this Authors. The aId field corresponds to the database
     * column postgres.public.authors.a_id.
     * 
     * @param aId to set of this Authors
     * @return    this Authors instance
     */
    Authors setAId(int aId);
    
    /**
     * Sets the aFirstName of this Authors. The aFirstName field corresponds to
     * the database column postgres.public.authors.a_first_name.
     * 
     * @param aFirstName to set of this Authors
     * @return           this Authors instance
     */
    Authors setAFirstName(String aFirstName);
    
    /**
     * Sets the aLastName of this Authors. The aLastName field corresponds to
     * the database column postgres.public.authors.a_last_name.
     * 
     * @param aLastName to set of this Authors
     * @return          this Authors instance
     */
    Authors setALastName(String aLastName);
    
    enum Identifier implements ColumnIdentifier<Authors> {
        
        A_ID         ("a_id"),
        A_FIRST_NAME ("a_first_name"),
        A_LAST_NAME  ("a_last_name");
        
        private final String columnId;
        private final TableIdentifier<Authors> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "postgres";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "authors";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Authors> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}